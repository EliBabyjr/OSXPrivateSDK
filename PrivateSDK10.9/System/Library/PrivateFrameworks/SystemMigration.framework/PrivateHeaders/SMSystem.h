//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSCoding.h"
#import "NSCopying.h"

@class NSArray, NSImage, NSNumber, NSString, NSURL, SMCollectIncompatibleApps, SMDBAccess, SMODDBAccess, SMPathAnalysis, SMSlingShotFS, SMViewController;

@interface SMSystem : NSObject <NSCopying, NSCoding>
{
    NSString *_path;
    SMDBAccess *_dsdb;
    SMODDBAccess *_oddb;
    NSString *_systemName;
    NSString *_systemVersion;
    NSString *_productVersion;
    NSArray *_users;
    NSArray *_groups;
    SMPathAnalysis *_pathAnalysis;
    BOOL _systemPrepared;
    BOOL selected;
    NSURL *_url;
    int state;
    NSString *remoteDiskID;
    NSString *daDiskID;
    NSNumber *uiRank;
    SMSlingShotFS *_slingshotFS;
    SMCollectIncompatibleApps *_incompatibleAppsListedPaths;
    int migrationServerType;
    NSString *migrationServerVersion;
    NSString *_modelID;
}

+ (id)keyPathsForValuesAffectingModelIcon;
+ (id)keyPathsForValuesAffectingDisplayIcon;
+ (id)keyPathsForValuesAffectingDisplayName;
+ (id)keyPathsForValuesAffectingDisplayState;
+ (id)systemWithPath:(id)arg1;
+ (id)systemWithURL:(id)arg1;
+ (id)timeMachineSystemWithPath:(id)arg1 volumeName:(id)arg2 machineName:(id)arg3 isLiteBackup:(BOOL)arg4 backedUpOnVolume:(id)arg5;
+ (id)archivedSystemWithPath:(id)arg1 onVolume:(id)arg2;
@property(retain) NSString *remoteDiskID; // @synthesize remoteDiskID;
@property(copy) NSString *daDiskID; // @synthesize daDiskID;
@property int state; // @synthesize state;
@property BOOL selected; // @synthesize selected;
@property(retain) NSString *modelID; // @synthesize modelID=_modelID;
@property(readonly) SMViewController *accessoryProgressViewController;
- (void)evaluateServerType;
- (id)serverVersionOnSystem;
- (BOOL)isClientInstall;
- (BOOL)isSelfContainedServerInstall;
- (BOOL)isLegacyServerInstall;
- (BOOL)isExpectedServerType:(int)arg1;
- (BOOL)isMountableByUser;
- (id)slingshotFS;
- (BOOL)matches:(id)arg1;
- (id)description;
- (BOOL)isVeryOldSystemVersion;
- (id)mobileMeNamesInUserRecordNames;
- (id)hiddenSystemUsers;
- (id)getSystemUsers;
- (BOOL)isOverAFP;
- (BOOL)isMounted;
- (void)reclaimMobileTimeMachineFreeSpace;
- (unsigned long long)mobileTimeMachineJunkSpace;
- (unsigned long long)freeSpace;
@property(readonly) NSImage *volumeIcon;
@property(readonly) NSImage *modelIcon;
@property(readonly) NSImage *warningBadge;
@property(readonly) NSImage *displayIcon;
- (void)cancelSizing;
- (id)passcode;
- (BOOL)isMounting;
- (id)volumeName;
- (BOOL)slashUsersIsASymlink;
- (BOOL)isNetworkSystem;
- (BOOL)isTargetDiskModeSystem;
@property(readonly) NSString *migrationServerVersion;
@property(readonly) int migrationServerType;
- (void)setMigrationServerType:(int)arg1 andServerVersion:(id)arg2;
@property(readonly) NSArray *childSystems;
@property(readonly) BOOL enabled;
@property(readonly) BOOL selectableSystem;
- (void)pressedActionButton:(id)arg1;
@property(readonly) NSString *availableActionLabel;
@property(readonly) BOOL availableAction;
- (id)systemDescription;
@property(readonly) NSString *displayName;
@property(readonly) NSString *displayState;
- (BOOL)pathAnalysisBundleSupport;
- (BOOL)isInternal;
- (id)autoLoginShortName;
- (id)systemVersion;
- (id)productVersion;
- (id)systemName;
- (id)UUID;
- (BOOL)sortsToTop;
- (int)systemType;
- (id)path;
- (void)unmount;
- (BOOL)mountWithCredentials:(id)arg1;
- (BOOL)mount;
- (id)url;
- (void)dealloc;
- (unsigned long long)hash;
- (void)setUIRank:(long long)arg1;
- (id)uiRank;
- (BOOL)isUpToDate;
- (id)extendedDescription;
- (BOOL)isEqual:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)pathAnalysis;
- (BOOL)pathAnalysisCancelationSupport;
- (unsigned long long)usedSize;
- (unsigned long long)totalSize;
- (id)macAddress;
- (id)networkInterfaces;
- (id)networkPreferences;
- (BOOL)_isRunningSystem;
- (id)sanityCheck;
- (BOOL)authenticateAdminUser:(id)arg1 withPassword:(id)arg2;
- (BOOL)authenticateUser:(id)arg1 withPassword:(id)arg2;
- (BOOL)isUserAnAdmin:(id)arg1;
- (unsigned int)nextAvailableGroupID;
- (id)getAllUsersFromGroup:(id)arg1;
- (id)getAllUsersFromGroupWithName:(id)arg1;
- (id)getGroupWithGeneratedUID:(id)arg1;
- (id)getGroupWithID:(unsigned int)arg1;
- (id)getGroup:(id)arg1;
- (id)getAllGroups;
- (id)getAllUsers;
- (id)getUserWithUUID:(id)arg1;
- (id)getUserWithID:(unsigned int)arg1;
- (id)getUserByLongName:(id)arg1;
- (id)getUser:(id)arg1;
- (int)checkUserCollisionWithNewName:(id)arg1 andNewLongName:(id)arg2 conflictedUID:(unsigned int *)arg3 mayReplace:(char *)arg4;
- (id)directoryServicesDatabase;
- (id)defaultDatabase;
- (id)relativePathToSystem:(id)arg1;
- (void)invalidateCachedData;
- (void)cleanupSystem;
- (void)prepareSystem;
- (struct __DADisk *)copyDisk;
- (id)incompatibleAppData;
- (BOOL)isPathInIncompatibleApplicationsList:(id)arg1;
- (id)incompatiblePathsUnderPath:(id)arg1;
- (void)prepareIncompatibleApplicationsList;

@end

