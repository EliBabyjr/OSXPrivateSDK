//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class AVAudioDevice, NSDictionary, NSObject<OS_dispatch_queue>;

__attribute__((visibility("hidden")))
@interface AVAudioManager : NSObject
{
    int direction;
    int audioRefCount;
    int connectionRefCount;
    int internalBlockSize;
    int hardwareSampleRate;
    struct AudioStreamBasicDescription vpioFormat;
    BOOL usingFloat;
    BOOL isGKVoiceChat;
    BOOL forcedTearDown;
    BOOL enableSpeakerPhone;
    BOOL isUsingSuppression;
    BOOL isTetheredDisplayMode;
    BOOL shouldSetupAudioSession;
    int clientPID;
    NSDictionary *backMicSource;
    NSDictionary *frontMicSource;
    struct _opaque_pthread_mutex_t audioLock;
    NSObject<OS_dispatch_queue> *cmSessionQueue;
    NSObject<OS_dispatch_queue> *inputDeviceQueue;
    struct tagHANDLE *hAUIO;
    AVAudioDevice *targetInputDevice;
    int inferredOperatingMode;
    unsigned int currentVPOperatingMode;
    BOOL currentAudioRecordingMode;
    int currentSampleRate;
    int currentMinSamplesPerFrame;
    BOOL currentReceiverStatus;
}

+ (id)defaultAVAudioManager;
@property(readonly, nonatomic) int inferredOperatingMode; // @synthesize inferredOperatingMode;
@property(retain) AVAudioDevice *targetInputDevice; // @synthesize targetInputDevice;
@property(readonly, nonatomic) BOOL usingFloat; // @synthesize usingFloat;
@property(nonatomic) int clientPID; // @synthesize clientPID;
@property(nonatomic) BOOL isUsingSuppression; // @synthesize isUsingSuppression;
@property(nonatomic) BOOL isGKVoiceChat; // @synthesize isGKVoiceChat;
- (BOOL)projectionModeEnabledState;
- (void)setBlockSize:(BOOL)arg1;
- (void)setupVPBlockFormat;
- (void)setSampleRate;
- (void)resetAudioSessionProperties;
- (void)setAudioSessionProperties;
- (BOOL)forceBufferFrames:(int *)arg1;
- (BOOL)forceSampleRate:(double *)arg1;
- (void)tearDownAudioSession:(unsigned long long)arg1 forceTearDown:(BOOL)arg2;
- (void)stopAudioSession:(unsigned long long)arg1;
- (unsigned long long)startAudioSessionWithCompletionHandler:(CDUnknownBlockType)arg1 dispatchQueue:(id)arg2;
- (void)setAudioSessionParameters:(id)arg1;
- (void)audioSessionClientDied:(int)arg1;
- (unsigned long long)setupAudioSession;
@property BOOL shouldSetupAudioSession;
- (void)setupAudioNotifications;
@property(getter=isSpeakerPhoneEnabled) BOOL enableSpeakerPhone;
- (void)enableMetering:(BOOL)arg1 isInputMeter:(BOOL)arg2;
- (void)setSamplesPerFrame:(int)arg1;
- (void)setMicrophoneMuted:(BOOL)arg1;
- (void)getVpioFormat:(struct AudioStreamBasicDescription *)arg1;
- (void)stopAudioIO;
- (void)tearDownAudioIO:(BOOL)arg1;
- (void)cleanupAUIOSetupWithResult:(int)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startAudioIOWithFarEndVersionInfo:(struct VoiceIOFarEndVersionInfo *)arg1 minSamplesPerFrame:(int)arg2 internalFormat:(struct AudioStreamBasicDescription)arg3 allowAudioRecording:(BOOL)arg4 operatingMode:(int)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)AUIOTeardown:(BOOL)arg1;
- (void)AUIOSetup:(struct VoiceIOFarEndVersionInfo *)arg1 minSamplesPerFrame:(int)arg2 allowAudioRecording:(BOOL)arg3 ignoreRefCount:(BOOL)arg4 operatingMode:(int)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)setDirection:(int)arg1;
- (void)updateTargetInputDevice;
- (BOOL)setCurrentInputDevice:(id)arg1;
- (id)currentInputDevice;
- (id)init;

@end

